#! /bin/sh
#
# Assemble the C and Fortran versions of the basic course
#
next=
prev=
parent=
do_contents=1
#
# srctree allows us to have several exercise "groups"
srctree=src
#
assign_list="hellow bcast ring exchange jacobi collect jacobicmpl endlist"
rootloc="file:/home/MPI/class/mpiexmpl"
#
Exercises="Exercises"
#
# Get command-line info on the relationship of this page to other pages
for arg in "$@" ; do
    case "$arg" in 
	-next=*)
	next=`echo a$arg | sed 's/a-next=//'` ;;
	-prev=*)
	prev=`echo a$arg | sed 's/a-prev=//'` ;;
	-parent=*)
	parent=`echo a$arg | sed 's/a-parent=//'` ;;
	-root=*)
	rootloc=`echo a$arg | sed 's/a-root=//'` ;;
	-src=*)
	srctree=`echo a$arg | sed 's/a-src=//'` ;;
	-echo) set -x ;;
	-nocontents|-no_contents) do_contents=0 ;;
	-example)
	Exercises="Examples"
	example="-example"
	;;
	*) echo "Unrecognized arg $arg"
	   exit 1 ;;
    esac
done

case "$srctree" in 
    src)
	if [ $do_contents = 1 ] ; then
	    /bin/rm -f contents.html
	    cat >> contents.html <<EOF
<TITLE>MPI $Exercises</TITLE>
<BODY BGCOLOR="FFFFFF">
EOF
	fi
    assign_list="hellow bcast ring exchange jacobi collect jacobicmpl endlist"
    src_title="Simple Parallel Data Structures"
    ;;
    src2)
    assign_list="io ioserv endlist"
    src_title="Master/slave"
    ;;
    src3)
    assign_list="memcpy pingpong barrier vector 3way circulate jacobi endlist"
    src_title="Performance tuning MPI"
    is_last=1
    ;;
    *)
    echo "Unknown source tree $srctree"
    exit 1
    ;;
esac

#
# Make the contents list.  This assumes that the src trees are built in 
# order.  If one is updated, then the contents.html file will need to be
# updated by hand.
#
if [ $do_contents = 1 ] ; then 
    echo "<H2>$src_title</H2>" >> contents.html
    if [ -s $srctree/runs.html ] ; then
	cat >> contents.html <<EOF
<A HREF="$rootloc/$srctree/runs.html">Results</A> of running all of the 
exercises in this section are available.	
<P>
EOF
    fi
    echo "<UL>" >> contents.html
fi
#
for file in $assign_list ; do
    if [ ! -s $srctree/$file/C/title.txt ] ; then
        continue
    fi
    title_text=`cat $srctree/$file/C/title.txt`
    if [ $do_contents = 1 ] ; then 
	cat >> contents.html <<EOF
<LI> <A HREF="$rootloc/$srctree/$file/C/main.html" TARGET="_top">$title_text</A>
EOF
        if [ -s $srctree/$file/C/related.lst ] ; then
            echo "<UL>" >> contents.html
            for rfile in `cat $srctree/$file/C/related.lst` ; do
	        title_text=`cat $srctree/$file/C/$rfile/title.txt`
		cat >> contents.html <<EOF
<LI> <A HREF="$rootloc/$srctree/$file/C/$rfile/main.html" TARGET="_top">$title_text</A>
EOF
	    done
	    echo "</UL>" >> contents.html
	fi
    fi
done
if [ $do_contents = 1 ] ; then 
    echo "</UL>" >> contents.html
    if [ "$is_last" = 1 ] ; then 
        echo "</BODY>" >> contents.html
    fi
fi
#
# Make the individual pages
for file in $assign_list ; do
    oldprev=$prev
    prev=$next
    next=$file
    if [ -d $srctree/$prev/C ] ; then 
	echo "Processing directory $srctree/$prev/C"
	if [ -n "$oldprev" ] ; then 
  	    prevarg="-prev=../../$oldprev/C"
        fi
        if [ ! -d $srctree/$next/C ] ; then
	    nextarg=
	else
	    nextarg="-next=../../$next/C"
	fi
        (cd $srctree/$prev/C ; \
        /home/MPI/class/mpiexmpl/maint/makepage $nextarg $prevarg -root=$rootloc $example )
    fi
done
